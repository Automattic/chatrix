# Uses latest NodeJS
image: node:latest

# And to cache them as well.
cache:
  paths:
    - node_modules/
    - .yarn

# You specify the stages. Those are the steps that GitLab will go through 
# Order matters. 
stages:
  - build
  - upload
  - release

variables:
   PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/chatterbox_releases"

Build:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG  # Run this job when a tag is created manually
  before_script: 
    - yarn config set cache-folder .yarn
    - yarn install 
  script:
    - yarn build
    - cd target
    - tar -czvf ../chatterbox-$CI_COMMIT_TAG.tar.gz *
  artifacts:
      paths:
          - chatterbox-$CI_COMMIT_TAG.tar.gz
      expire_in: 1 hour

Upload:
  stage: upload
  image: curlimages/curl:latest
  rules:
    - if: $CI_COMMIT_TAG
  dependencies: 
    - Build
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "chatterbox-${CI_COMMIT_TAG}.tar.gz" "${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/chatterbox-${CI_COMMIT_TAG}.tar.gz"

Release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - |
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"chatterbox-$CI_COMMIT_TAG.tar.gz\",\"url\":\"${PACKAGE_REGISTRY_URL}/${CI_COMMIT_TAG}/chatterbox-$CI_COMMIT_TAG.tar.gz\"}" \